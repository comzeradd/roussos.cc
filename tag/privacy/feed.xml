<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <author>Nikos Roussos</author>
  <title>nikos.roussos - privacy</title>
  <link href="https://www.roussos.cc/feed.xml" rel="self" />
  <link href="https://www.roussos.cc/" />
  <icon>https://www.roussos.cc/favicon.ico</icon>
  <logo>https://www.roussos.cc/static/img/</logo>
  <updated>2016-02-12T15:26:49Z</updated>
  
    <entry>
      <title>Will you be my cryptovalentine?</title>
      <link href="https://www.roussos.cc/2016/02/12/cryptovalentine/"/>
      <content type="html">
        <![CDATA[
          <p><img alt="cryptovalentine" src="cryptolove.jpg" /></p>
<blockquote>
<p>Roses are red, violets are blue; I use free software to encrypt my online communication and so should you.</p>
</blockquote>
<p>Over the last few year Free Software Foundation Europe runs a campaign called <a href="https://fsfe.org/campaigns/ilovefs/2016/">"I love Free Software Day"</a>. It's an opportunity to share your appreciation (or love) with the developers of your favorite Free Software project. So after you are done reading this post, <strong>choose your favorite project and send its developer(s) an appreciation email</strong>.</p>
<p>Last year <a href="http://zakkkko.com/">Zak Rogoff </a>, had a great similar idea. On <a href="https://www.fsf.org/blogs/community/will-you-be-my-cryptovalentine">a post he wrote</a> he suggested we use the Valentine's Day as an opportunity to use Free Software in order to setup secure and private communications with our significant other.</p>
<blockquote>
<p>Ask someone you like -- romantically or otherwise -- to be your cryptovalentine. If they say yes (yikes, nervous!) use the free program GnuPG to set up private and encrypted communication with them.</p>
</blockquote>
<p>Last year this was like a late new year's resolution for me. I didn't want to stick to GnuPG or just set the tools up. I wanted to make sure that all forms of communication are secure and private. This is how I (partially) did it. This is focused on mobile communications, because that is what we almost exclusively use for communicating when online.</p>
<h4><strong>Email</strong></h4>
<p>The first thing that comes to mind is email and the obvious choice of GnuPG. And specifically <a href="https://www.openkeychain.org/about/">OpenKeyChain</a> and K9. And it's of course the first thing I did. If you are thinking "GPG keys on mobile? Are you sure?", then you have a <a href="https://www.roussos.cc/2016/02/01/passive-surveillance/">different threat model</a> in mind.</p>
<p>OpenKeyChain has made major steps over the last couple of years in terms of usability. It's easy even to generate a new key directly on your phone and easily fetch your contacts keys from keyservers or import them. It's also easy to connect it with the K9 mail client.</p>
<p>Despite all improvements I'm not completely satisfied with the end result at the moment. There is one thing that can really ruin everything. There is no way currently to configure K9 to encrypt all outgoing emails by default if a key is present. That can lead to accidentally replying to an encrypted email in plain text, or just forget to tick the encryption mode when composing a new email. Good thing is that K9 doesn't quote an encrypted email as unencrypted text when replying, which makes emails look ugly but at least it saves you from leaking data by mistake. There is also the issue of PGP/Mime support, but that' not relevant to the communication model I'm describing here. Both ends will use PGP inline, so you'll be ok.</p>
<h4><strong>Chat</strong></h4>
<p>The obvious decentralized choice would be Jabber with OTR. Many things have changed over the last couple of years. Apps like WhatsApp or Telegram have become really popular. Both of course are not to be considered secure. Source code is not completely open and free and both are centralized which gives one entity the knowledge of the entire social graph. But these apps created a usability precedence. People expect easy registration, even if that requires giving away their phone number and, even worse, their entire addressbook. And people also expect that this will work flawlessly on mobile, where connection can sometimes be flaky. Jabber with OTR fails on both. For the communication model I'm describing here registration issues are not important. But being able to communicate over mobile networks is really important.</p>
<p>Surprisingly many people on the free and open source camp started using (and promoting) Signal, which is indeed better that the two previous options of WhatsApp and Telegram, since the whole stack is completely free and open source. But it keeps all the other problems mentioned above (centralized, addressbook access, etc). I have <a href="https://www.roussos.cc/2015/12/05/signal-privacy/">written about this</a> in details before and <a href="https://twitter.com/moxie/status/644551336843870208">Signal's attitude</a> shows that things can only get worse.</p>
<p>So where does this leave us? Signal's protocol, <a href="https://github.com/trevp/axolotl/wiki">Axolotl Ratchet</a>, is really well designed. What if this could work on top of Jabber? Then we would have the best things of both worlds. That's what <a href="https://www.roussos.cc/2016/01/05/jabber-omemo/">OMEMO does</a>.</p>
<p>So my choice was the <a href="https://conversations.im/">Conversations</a> app using Jabber along with OMEMO encryption. I have to admit this turn out to work far better than I expected. <strong>You set the encryption once and then you forget about it. It just works.</strong> All communications are encrypted by default. Offline messages just work. You don't have to worry if the other end is online at the moment. No need to terminate or re-establish encryption sessions (sounds familiar OTR friends?). This worked so good that we actually replaced email communications. I mean, think about it. Most of the emails we exchange during the day are short texts. The only reason we were using email was because it gives the feeling of asynchronous non-urgent communication. But if you have a chat application that online presence doesn't really matters then you already have this.</p>
<h4><strong>SMS</strong></h4>
<p>We rarely use the mobile telephony network to chat, and since we started using Jabber/OMEMO, this became even more rare. But just for these rare cases, here is what I did and suggest.</p>
<p>Signal started as TextSecure and it used to support the SMS network too. At some point they decided to drop SMS support for <a href="https://whispersystems.org/blog/the-new-textsecure/">various reasons</a>. Then a free software team forked it and kept just the SMS part (it's Axolotl Ratchet again) and dropped all Google dependencies to create <a href="http://smssecure.org/">SMSSecure</a>. Similar to what I mentioned above, you setup the encryption once and then you forget it. I set this up months ago and all SMS we have exchanged since are encrypted. The app of course works as a regular SMS app, so you just make it your default one and use it for regular plain text SMS messages for the rest of your not-so-brave contacts. At least you'll have encrypted local storage for your sms messages, something that most sms apps don't offer.</p>
<h4><strong>Voice</strong></h4>
<p>This is the most difficult one, and the one we haven't yet completely achieve. It's not easy to encrypt phone calls and still keep using the traditional mobile network of your carrier. So the next best thing is to do it over the data network. Again usability is important here. So SIP was not my first option. Many apps have come into life over the last couple of years, but most of them are still not mature enough. For instance <a href="https://tox.chat/">Tox</a> is nice, but the mobile client lacks voice calls at the moment and their core protocol is not designed with mobile usage in mind, which leads to battery drainage.</p>
<p>Another similar approach is the <a href="https://ring.cx/">Ring</a>. It's also at its early days, but recently the mobile client added voice calls. We started using it over the last month, but it's still early to judge it. If you are interested in the technical details see the <a href="http://ftp.fau.de/fosdem/2016/k1105/building-a-peer-to-peer-network-for-real-time-communication.mp4">core developers presentation</a> at this year's Fosdem.</p>
<h4><strong>Video</strong></h4>
<p>Weirdly enough this is something we solved long before the voice communications. Video is something you explicitly choose to do, so you don't have so many requirements in terms of integration with the rest of the phone operating system. We use <a href="https://en.wikipedia.org/wiki/WebRTC">WebRTC</a>. Encryption is mandatory for WebRTC, using <a href="https://en.wikipedia.org/wiki/Datagram_Transport_Layer_Security">DTLS</a> and it's P2P. You can find many services out there, some completely Free and Open Source (so you can set it up on your own if you don't trust them), and a few also offer private rooms.</p>
<p>Another option (still WebRTC) is <a href="https://www.mozilla.org/en-US/firefox/hello/">Firefox Hello</a>. I've been using Hello from the first day it was released and works great. The only problem is that you can initiate a call only from a Desktop Firefox. But a few months back Hello offered the option to create a room, give it an alias to make it more recognizable than a hash and bookmark it. So if both ends have this unique url they can initiate a video call directly from Firefox mobile.</p>
<p>Whatever WebRTC option you choose remember that this works through your browser. I have test this only on Firefox, but it should work on other browsers too with no extra plugin. Just use a browser that it's Free and Open Source. Otherwise <a href="https://twitter.com/comzeradd/status/653535902950682624">you shouldn't trust it</a> for your communications.</p>
<h4><strong>Now it's your turn</strong></h4>
<p>All apps mentioned here are available on <a href="https://f-droid.org/">F-droid</a>, so it's not that hard to get started. Remember, <a href="https://www.roussos.cc/2014/05/14/our-privacy-is-interdependent/">our privacy is interdependent</a>. It's not enough to secure your devices only. What better way to start than this? Ask your significant other or someone you like, romantically or otherwise, to be your cryptovalentine. You don't have to use the specific tools I mention here. I urge you to use only Free / Open Source software and decentralized services. And remember this is just the beginning. After you succeed, spread this know-how to the rest of your friends.</p>
<hr>

<p><em>Comments and reactions on <a href="https://librenet.gr/posts/601875">Diaspora</a> or <a href="https://twitter.com/comzeradd/status/698135511437803520">Twitter</a></em></p>
        ]]>
      </content>
      <published>2016-02-12 15:01:23</published>
    </entry>
  
    <entry>
      <title>Fighting Passive Surveillance should be our top priority</title>
      <link href="https://www.roussos.cc/2016/02/01/passive-surveillance/"/>
      <content type="html">
        <![CDATA[
          <p><img alt="massive" src="massive.jpg" /></p>
<h4><strong>Post-Snowden</strong></h4>
<p>We definitely live in a different world since Snowden leaks, but for some people nothing has changed. We always knew that certain individuals are targeted by local or international law enforcement agencies. In some cases they even have a legal way of doing this. If you work on certain fields or operate as an activist in political issues, you always assumed or knew that your communications are monitored. We may have better knowledge on the way the do it, or which things they have broken and which not yet. But essentially nothing is new about this on the post-Snowden world.</p>
<p>What Snowden leaks actually changed, what we learned from the documents, is that there is a vast ongoing process of massive passive surveillance and data collection. <strong>It doesn't matter if you are considered important. It doesn't matter if you have something to hide or not. All of your communications are monitored, stored and analyzed.</strong> This is what changed. This is what we learned.</p>
<p>Let me pause my thoughts for a moment and share a controversial story...</p>
<h4><strong>Mobile email encryption</strong></h4>
<p>Would you store your private PGP key to your mobile smartphone? Many (most?) hackers/geeks would easily answer in a negative way. Mobile phones have two major security implications that our laptops (usually) don't.</p>
<ul>
<li>
<p>Physical security. It's more easy to lose your phone, or for someone to steal it. It's a comparatively smaller device, usually carried away in your pocket. And once you lose it, all keys stored there should be considered compromised (which is a big problem on its own, since PGP doesn't offer <a href="https://en.wikipedia.org/wiki/Forward_secrecy">Forward Secrecy</a>).</p>
</li>
<li>
<p>More than one operating system. Even if you have taken <a href="https://www.roussos.cc/2014/05/08/free-your-android/">all measures</a> to secure your operating system, the problem is that your phone runs also a second operating system. The "radio" OS running on your baseband chip. It's a complete proprietary black box, that you don't know what it does. You don't even know if it's isolated from your "smart" operating system.</p>
</li>
</ul>
<p>On a side note, mobile operating systems have a security advantage that almost all modern desktop operating systems (even most major linux distributions) lack. All applications are sandboxed. So even if you are running a malicious application (you know, like <a href="http://www.theregister.co.uk/2014/01/27/leaking_smartphone_apps_nsa_gchq/">Angry Birds</a>) it may do various unwanted things regarding your personal mobile usage (eg. track location) but it can't easily steal your PGP private key stored inside <a href="https://www.openkeychain.org/about/">OpenKeyChain</a>'s isolated storage. Not many desktop operating systems can protect you from a malicious application getting access to your <code>.gnupg</code> or <code>.ssh</code> folder.</p>
<p>So, although these two points are completely valid and indeed mobile smartphones are less secure, we have to realize that this is where most users read their emails. In many cases, a mobile phone is the only device people read their emails. Many people have come to cryptoparties, and after getting in touch with the complete lack of usability that comes with the standard pgp gui stack (Thunderbird + Enigmail), they ask how the can do the same things on their mobile. Most hackers would react (or even deny to help) exactly because of the reasons mentioned above. Let me clear up the dilemma a bit: Most people have two options to choose. Either use email encryption on their mobile phone or don't use encryption at all. And <strong>unfortunately most hackers fail to see that for most people the threat model is passive surveillance</strong>.</p>
<h4><strong>Threat Model</strong></h4>
<p>Not all people are trying to protect from the same things or the same type of adversaries. Not all people have the same <a href="https://ssd.eff.org/en/glossary/threat-model">Threat Model</a>.</p>
<p>I was very pleased to see Werner Koch presenting at <a href="https://events.ccc.de/congress/2015/wiki/Main_Page">32c3</a> this year about the current status of <a href="https://gnupg.org/">GnuPG</a>, where he mentioned that the focus from now on is the passive surveillance threat model. <strong>Building tools that focus on the passive surveillance threat model, means that usability and encryption by default is top priority.</strong></p>
<p>I have participated and co-organized many <a href="https://www.cryptoparty.in/athens">Cryptoparties</a>, <a href="http://wiki.fsfe.org/groups/Athens">Free Software Meetups</a>, and related crypto/privacy events/workshops. And I believe that the passive surveillance threat model should also be our focus. Yes, sometimes we need to quickly determine if a person has a different threat model (eg. journalists), but most people participating in these kind of events are not targets (at least not NSA targets). We know that they collect everything, we know that <a href="http://www.theregister.co.uk/2016/01/27/nsa_loves_it_when_you_use_pgp/">they love pgp</a> because it's rarely used and stands out. <strong>Let's make their job more difficult. Encrypt all things by default. Let's start  from fighting against massive passive surveillance.</strong></p>
<hr>

<p><em>Comments and reactions on <a href="https://librenet.gr/posts/582762">Diaspora</a> or <a href="https://twitter.com/comzeradd/status/694082702815989760">Twitter</a></em></p>
        ]]>
      </content>
      <published>2016-02-01 11:01:52</published>
    </entry>
  
    <entry>
      <title>Multi-End Message and Object Encryption. What?</title>
      <link href="https://www.roussos.cc/2016/01/05/jabber-omemo/"/>
      <content type="html">
        <![CDATA[
          <p>So, many people promoting Signal over Jabber/OTR for its usability and security features (besides all <a href="https://librenet.gr/posts/497875">caveats</a>). Most of these features are offered due the <a href="https://github.com/trevp/axolotl/wiki">Axolotl Ratchet</a> protocol.</p>
<p>What if this protocol was implemented as an extension to Jabber? This would combine all best things from both worlds. Offline (encrypted) messages, multiple devices, better mobile integration but on the same time decentralized federated service. Well it’s done. Meet <a href="http://conversations.im/omemo/">OMEMO</a>.</p>
<p><a href="http://conversations.im/">Conversations</a> on Android already supports it, <a href="https://chatsecure.org/blog/chatsecure-conversations-zom/">ChatSecure</a> is implementing it too and tickets are already opened on <a href="https://developer.pidgin.im/ticket/16801">Pidgin</a> and <a href="https://www.mail-archive.com/tor-bugs@lists.torproject.org/msg84721.html">Tor Messenger</a>. <a href="https://gajim.org/">Gajim</a> is currently the only desktop app that supports it (through <a href="https://github.com/kalkin/gajim-omemo/">a plugin</a>), but if you want to have OTR too then Gajim is not an option since <a href="https://github.com/python-otr/gajim-otr">its OTR plugin is unmaintained</a>.</p>
<p>I’ve been testing Conversations/OMEMO over the last week and it works great. So maybe in a few months we’ll have something truly secure, decentralized and usable to suggest to our friends ;) Or just suggest Conversations to the most brave of your friends.</p>
<p><img alt="omemo" src="omemo.png" /></p>
<hr />

<p><em>Comments and reactions on <a href="https://librenet.gr/posts/541037">Diaspora</a> or <a href="https://twitter.com/comzeradd/status/684297833453907968">Twitter</a></em></p>
        ]]>
      </content>
      <published>2016-01-05 12:41:37</published>
    </entry>
  
    <entry>
      <title>If you care about privacy, Signal is certainly not an option</title>
      <link href="https://www.roussos.cc/2015/12/05/signal-privacy/"/>
      <content type="html">
        <![CDATA[
          <p>Whisper Systems failed big once again. They just <a href="https://whispersystems.org/blog/signal-desktop/">announced</a> their "Desktop" version of Signal, which is actually a Chrome app.</p>
<p>So just to get facts straight, this is neither a Desktop nor a Web app. And just like their Android app, you need a Google account to download it.</p>
<p>Actually this is even worse, because you also need to use Chrome to use this app. <strong>Channeling all your (meta)data through a closed source browser, built &amp; distributed by the biggest tracking ad company.</strong></p>
<p>If you care about privacy, Signal is certainly not an option.</p>
<hr />

<p><em>Comments and reactions on <a href="https://librenet.gr/posts/497875">Diaspora</a> or <a href="https://twitter.com/comzeradd/status/673940185692905476">Twitter</a></em></p>
        ]]>
      </content>
      <published>2015-12-05 15:45:08</published>
    </entry>
  
    <entry>
      <title>Setup a home server with Fedora and BeagleBone Black</title>
      <link href="https://www.roussos.cc/2014/06/23/fedora-beaglebone-black/"/>
      <content type="html">
        <![CDATA[
          <p>Over the last <a href="http://www.roussos.cc/2014/04/30/athens-free-software-monthly-meetups/">Free Software Meetup</a> we discussed about the "build your own home server" movement. This is a long and complex discussion, so most likely it will expand to future meetups. In the meantime I wanted to test BeagleBone Black (BB), as the hardware platform for such a project.</p>
<p><img src="beagle-fedora.png" alt="fedora on beaglebone black" class="txt" /> I prefer BB over Raspeberry Pi (RaPi) because, despite what many people seem to believe, RaPi <a href="http://en.wikipedia.org/wiki/Raspberry_Pi#Driver_API">is not</a> fully Open Hardware. I also prefer armv7 hardware, since it gives me the option to use a "regular" linux distribution. I have the option for Fedora or Debian instead of Pidora or Raspbian. </p>
<p>During the meetup we talked a lot about <a href="https://arkos.io/">Arkos</a>, which supports many arm boards and seems like a great choice for administering your home server through a well designed web interface, lowering the technical knowledge threshold for setting up services like file or mail server. I'll get back to Arkos, but at this point I wanted to experiment with a "regular" distribution. So this post is about Fedora and Beaglebone Black.</p>
<p>Download the <a href="http://fedoraproject.org/en/get-fedora#arm">Fedora ARM image</a> extract it and rename it to <code>fedora-arm.raw</code> so it's easier to follow the steps bellow.</p>
<p>Flashing Fedora to BB is not that difficult. The tricky part is that Fedora comes with an "initial setup" screen, which requires an hdmi monitor and a keyboard at least on first run so you can set some basic things (like root password). I wanted to do some modifications to the Fedora image, and get through this "initial setup" screen prior to flashing it on the BB. Inspired by <a href="http://ebalaskas.gr/blog/2013/03/25/raspberry-pi-with-archlinux-under-qemu/">Ebal's post</a>, I thought Qemu as a perfect tool for this job.</p>
<pre><code>sudo yum install qemu-system-arm
</code></pre>
<p>With qemu-system-arm tool I can emulate arm and run the image on my laptop. In order to boot the image qemu needs a kernel and what better place of finding a kernel than the image itself. You can either mount the image and copy kernel and initrd out or use libguestfs (kernel and Initrd version will obviously vary on future releases).</p>
<pre><code>sudo yum install -y libguestfs-tools
virt-copy-out -a fedora-arm.raw /boot/vmlinuz-3.11.10-301.fc20.armv7hl .
virt-copy-out -a fedora-arm.raw /boot/initramfs-3.11.10-301.fc20.armv7hl.img .
</code></pre>
<p>Finally run it. (you may have to add your user to kvm group)</p>
<pre><code>sudo usermod -aG kvm username
newgrp kvm
qemu-system-arm -machine vexpress-a9 -m 1024 -nographic -net nic -net user \
 -append "console=ttyAMA0,115200n8 rw root=/dev/mmcblk0p3 rootwait physmap.enabled=0" \
 -kernel vmlinuz-3.11.10-301.fc20.armv7hl \
 -initrd initramfs-3.11.10-301.fc20.armv7hl.img \
 -sd fedora-arm.raw
</code></pre>
<p>Booting up I reached to the "initial setup" screen I mentioned before. I created a new user with administrator (aka sudo) privileges. First things I did when finally got a prompt was to disable root account:</p>
<pre><code>sudo passwd -l root
</code></pre>
<p>set a hostname</p>
<pre><code>vi /etc/sysconfig/network
</code></pre>
<p>disable Network Manger</p>
<pre><code>systemctl disable NetworkManager.service
</code></pre>
<p>setup static networking</p>
<pre><code>echo "
 HWADDR="D8:D3:85:AE:DD:4C"
 BOOTPROTO="static"
 DEVICE="eth0"
 ONBOOT="yes"
 IPADDR=192.168.1.2
 NETMASK=255.255.255.0
 BROADCAST=192.168.1.255
 NETWORK=192.168.1.0
 GATEWAY=192.168.1.1
"&gt;/etc/sysconfig/network-scripts
</code></pre>
<p>add DNS settings</p>
<pre><code>echo "
 nameserver 208.67.222.222
 nameserver 208.67.222.222
"&gt;/etc/resolv.conf
</code></pre>
<p>disable selinux (<a href="http://stopdisablingselinux.com/">sorry Dan</a>)</p>
<pre><code>setenforce 0
sed -i s/=enforcing/=disabled/ /etc/selinux/config
</code></pre>
<p>Enable ssh</p>
<pre><code>systemctl enable sshd
firewall-cmd --permanent --zone=public --add-service=ssh
</code></pre>
<p>Fedora image is around 2G. I had a 4G SDcard so I expanded it by 2G</p>
<pre><code>qemu-img resize fedora-arm.raw +2G
</code></pre>
<p>Important to remember that this will expand the image but not the root filesystem inside. Flash it to an SDcard</p>
<pre><code>dd if=fedora-arm.raw of=/dev/sdX
</code></pre>
<p>This a destructive command so make sure that sdX refers to your SDcard and not some disk. Now mount the card and resize the root filesystem, that probably would be on sdX3</p>
<pre><code>e2fsck -f /dev/sdX3
resize2fs /dev/sdX3
</code></pre>
<p>And that's all. I removed the mini sd from the adapter and inserted it on BB. All that's left is ethernet connection and power. Less than a minute later I was able to ssh to my soon-to-be home server from my laptop.</p>
        ]]>
      </content>
      <published>2014-06-23 13:13:52</published>
    </entry>
  
    <entry>
      <title>Our privacy is interdependent</title>
      <link href="https://www.roussos.cc/2014/05/14/our-privacy-is-interdependent/"/>
      <content type="html">
        <![CDATA[
          <p>Last week I gave a presentation at <a href="http://commonsfest.info/">CommonsFest</a> in the spirit of my <a href="http://www.roussos.cc/2014/05/08/free-your-android/">Free Your Android</a> post, trying to educate people on simple steps they can make to have better privacy on their mobile devices.</p>
<p>A couple of days before my presentation I watched <a href="https://www.youtube.com/watch?v=BBgZyV4iltw">this great speech</a> from Jillian York and Jacob Appelbaum (please go and watch this). At some point Jacob mentions that <em>"our security is interdependent"</em>.</p>
<p>Few days later Benjamin Mako Hill came to confirm this remark, but with <a href="http://mako.cc/copyrighteous/google-has-most-of-my-email-because-it-has-all-of-yours">real evidence</a>. He analyzed his emails to find out that despite self-hosting his own mail server, 57% of his emails endup on Google's servers. I ran <a href="http://projects.mako.cc/source/?p=gmail-maildir-counter">the code</a> on my emails and I got pretty much the same percentage (and a bit higher if I include all three big providers).</p>
<p>This was how I ended my presentation (not aware of Benjamin's work at the moment):</p>
<blockquote>
<p>"I have made a personal choice not to host my email on Google, Microsoft or Yahoo. But if the majority of my contacts use one of these providers then most of my outgoing emails end up to their servers. It's important to understand that <strong>our privacy depends on the privacy of our social network</strong>."</p>
</blockquote>
        ]]>
      </content>
      <published>2014-05-14 12:51:29</published>
    </entry>
  
</feed>